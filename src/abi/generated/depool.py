"""
This file was auto generated by nekoton.
"""

from typing import List as _List, Optional as _Optional, Dict as _Dict, TypedDict as _TypedDict
from nekoton import FunctionCall as _FunctionCall, FunctionAbi as _FunctionAbi, Tokens as _Tokens, Address as _Address, ContractAbi as _ContractAbi, Cell as _Cell, FunctionAbiWithArgs as _FunctionAbiWithArgs, Transaction as _Transaction


DEPOOL_ABI = _ContractAbi(r"""{"ABI version": 2, "header": ["time", "expire"], "functions": [{"name": "constructor", "inputs": [{"name": "minStake", "type": "uint64"}, {"name": "validatorAssurance", "type": "uint64"}, {"name": "proxyCode", "type": "cell"}, {"name": "validatorWallet", "type": "address"}, {"name": "participantRewardFraction", "type": "uint8"}], "outputs": []}, {"name": "addOrdinaryStake", "inputs": [{"name": "stake", "type": "uint64"}], "outputs": []}, {"name": "withdrawFromPoolingRound", "inputs": [{"name": "withdrawValue", "type": "uint64"}], "outputs": []}, {"name": "addVestingStake", "inputs": [{"name": "stake", "type": "uint64"}, {"name": "beneficiary", "type": "address"}, {"name": "withdrawalPeriod", "type": "uint32"}, {"name": "totalPeriod", "type": "uint32"}], "outputs": []}, {"name": "addLockStake", "inputs": [{"name": "stake", "type": "uint64"}, {"name": "beneficiary", "type": "address"}, {"name": "withdrawalPeriod", "type": "uint32"}, {"name": "totalPeriod", "type": "uint32"}], "outputs": []}, {"name": "withdrawPart", "inputs": [{"name": "withdrawValue", "type": "uint64"}], "outputs": []}, {"name": "withdrawAll", "inputs": [], "outputs": []}, {"name": "cancelWithdrawal", "inputs": [], "outputs": []}, {"name": "setVestingDonor", "inputs": [{"name": "donor", "type": "address"}], "outputs": []}, {"name": "setLockDonor", "inputs": [{"name": "donor", "type": "address"}], "outputs": []}, {"name": "transferStake", "inputs": [{"name": "dest", "type": "address"}, {"name": "amount", "type": "uint64"}], "outputs": []}, {"name": "participateInElections", "id": "0x4E73744B", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "validatorKey", "type": "uint256"}, {"name": "stakeAt", "type": "uint32"}, {"name": "maxFactor", "type": "uint32"}, {"name": "adnlAddr", "type": "uint256"}, {"name": "signature", "type": "bytes"}], "outputs": []}, {"name": "ticktock", "inputs": [], "outputs": []}, {"name": "completeRoundWithChunk", "inputs": [{"name": "roundId", "type": "uint64"}, {"name": "chunkSize", "type": "uint8"}], "outputs": []}, {"name": "completeRound", "inputs": [{"name": "roundId", "type": "uint64"}, {"name": "participantQty", "type": "uint32"}], "outputs": []}, {"name": "onStakeAccept", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "comment", "type": "uint32"}, {"name": "elector", "type": "address"}], "outputs": []}, {"name": "onStakeReject", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "comment", "type": "uint32"}, {"name": "elector", "type": "address"}], "outputs": []}, {"name": "onSuccessToRecoverStake", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "elector", "type": "address"}], "outputs": []}, {"name": "onFailToRecoverStake", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "elector", "type": "address"}], "outputs": []}, {"name": "terminator", "inputs": [], "outputs": []}, {"name": "setValidatorRewardFraction", "inputs": [{"name": "fraction", "type": "uint8"}], "outputs": []}, {"name": "receiveFunds", "inputs": [], "outputs": []}, {"name": "getLastRoundInfo", "inputs": [], "outputs": []}, {"name": "getParticipantInfo", "inputs": [{"name": "addr", "type": "address"}], "outputs": [{"name": "total", "type": "uint64"}, {"name": "withdrawValue", "type": "uint64"}, {"name": "reinvest", "type": "bool"}, {"name": "reward", "type": "uint64"}, {"name": "stakes", "type": "map(uint64,uint64)"}, {"components": [{"name": "remainingAmount", "type": "uint64"}, {"name": "lastWithdrawalTime", "type": "uint64"}, {"name": "withdrawalPeriod", "type": "uint32"}, {"name": "withdrawalValue", "type": "uint64"}, {"name": "owner", "type": "address"}], "name": "vestings", "type": "map(uint64,tuple)"}, {"components": [{"name": "remainingAmount", "type": "uint64"}, {"name": "lastWithdrawalTime", "type": "uint64"}, {"name": "withdrawalPeriod", "type": "uint32"}, {"name": "withdrawalValue", "type": "uint64"}, {"name": "owner", "type": "address"}], "name": "locks", "type": "map(uint64,tuple)"}, {"name": "vestingDonor", "type": "address"}, {"name": "lockDonor", "type": "address"}]}, {"name": "getDePoolInfo", "inputs": [], "outputs": [{"name": "poolClosed", "type": "bool"}, {"name": "minStake", "type": "uint64"}, {"name": "validatorAssurance", "type": "uint64"}, {"name": "participantRewardFraction", "type": "uint8"}, {"name": "validatorRewardFraction", "type": "uint8"}, {"name": "balanceThreshold", "type": "uint64"}, {"name": "validatorWallet", "type": "address"}, {"name": "proxies", "type": "address[]"}, {"name": "stakeFee", "type": "uint64"}, {"name": "retOrReinvFee", "type": "uint64"}, {"name": "proxyFee", "type": "uint64"}]}, {"name": "getParticipants", "inputs": [], "outputs": [{"name": "participants", "type": "address[]"}]}, {"name": "getDePoolBalance", "inputs": [], "outputs": [{"name": "value0", "type": "int256"}]}, {"name": "getRounds", "inputs": [], "outputs": [{"components": [{"name": "id", "type": "uint64"}, {"name": "supposedElectedAt", "type": "uint32"}, {"name": "unfreeze", "type": "uint32"}, {"name": "stakeHeldFor", "type": "uint32"}, {"name": "vsetHashInElectionPhase", "type": "uint256"}, {"name": "step", "type": "uint8"}, {"name": "completionReason", "type": "uint8"}, {"name": "stake", "type": "uint64"}, {"name": "recoveredStake", "type": "uint64"}, {"name": "unused", "type": "uint64"}, {"name": "isValidatorStakeCompleted", "type": "bool"}, {"name": "participantReward", "type": "uint64"}, {"name": "participantQty", "type": "uint32"}, {"name": "validatorStake", "type": "uint64"}, {"name": "validatorRemainingStake", "type": "uint64"}, {"name": "handledStakesAndRewards", "type": "uint64"}], "name": "rounds", "type": "map(uint64,tuple)"}]}], "data": [], "events": [{"name": "DePoolClosed", "inputs": [], "outputs": []}, {"name": "RoundStakeIsAccepted", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "comment", "type": "uint32"}], "outputs": []}, {"name": "RoundStakeIsRejected", "inputs": [{"name": "queryId", "type": "uint64"}, {"name": "comment", "type": "uint32"}], "outputs": []}, {"name": "ProxyHasRejectedTheStake", "inputs": [{"name": "queryId", "type": "uint64"}], "outputs": []}, {"name": "ProxyHasRejectedRecoverRequest", "inputs": [{"name": "roundId", "type": "uint64"}], "outputs": []}, {"name": "RoundCompleted", "inputs": [{"components": [{"name": "id", "type": "uint64"}, {"name": "supposedElectedAt", "type": "uint32"}, {"name": "unfreeze", "type": "uint32"}, {"name": "stakeHeldFor", "type": "uint32"}, {"name": "vsetHashInElectionPhase", "type": "uint256"}, {"name": "step", "type": "uint8"}, {"name": "completionReason", "type": "uint8"}, {"name": "stake", "type": "uint64"}, {"name": "recoveredStake", "type": "uint64"}, {"name": "unused", "type": "uint64"}, {"name": "isValidatorStakeCompleted", "type": "bool"}, {"name": "participantReward", "type": "uint64"}, {"name": "participantQty", "type": "uint32"}, {"name": "validatorStake", "type": "uint64"}, {"name": "validatorRemainingStake", "type": "uint64"}, {"name": "handledStakesAndRewards", "type": "uint64"}], "name": "round", "type": "tuple"}], "outputs": []}, {"name": "StakeSigningRequested", "inputs": [{"name": "electionId", "type": "uint32"}, {"name": "proxy", "type": "address"}], "outputs": []}, {"name": "TooLowDePoolBalance", "inputs": [{"name": "replenishment", "type": "uint256"}], "outputs": []}, {"name": "RewardFractionsChanged", "inputs": [{"name": "validator", "type": "uint8"}, {"name": "participants", "type": "uint8"}], "outputs": []}, {"name": "InternalError", "inputs": [{"name": "ec", "type": "uint16"}], "outputs": []}]}""")



class ConstructorInput(_TypedDict):
    minStake: int | _Tokens
    validatorAssurance: int | _Tokens
    proxyCode: _Cell
    validatorWallet: _Address
    participantRewardFraction: int | _Tokens


class ConstructorOutput(_TypedDict):
    pass


class DePoolConstructorFunctionCall(_FunctionCall):
    @property
    def input(self) -> ConstructorInput:
        return _FunctionCall.input

    @property
    def output(self) -> ConstructorOutput:
        return _FunctionCall.output


class AddOrdinaryStakeInput(_TypedDict):
    stake: int | _Tokens


class AddOrdinaryStakeOutput(_TypedDict):
    pass


class DePoolAddOrdinaryStakeFunctionCall(_FunctionCall):
    @property
    def input(self) -> AddOrdinaryStakeInput:
        return _FunctionCall.input

    @property
    def output(self) -> AddOrdinaryStakeOutput:
        return _FunctionCall.output


class WithdrawFromPoolingRoundInput(_TypedDict):
    withdrawValue: int | _Tokens


class WithdrawFromPoolingRoundOutput(_TypedDict):
    pass


class DePoolWithdrawFromPoolingRoundFunctionCall(_FunctionCall):
    @property
    def input(self) -> WithdrawFromPoolingRoundInput:
        return _FunctionCall.input

    @property
    def output(self) -> WithdrawFromPoolingRoundOutput:
        return _FunctionCall.output


class AddVestingStakeInput(_TypedDict):
    stake: int | _Tokens
    beneficiary: _Address
    withdrawalPeriod: int | _Tokens
    totalPeriod: int | _Tokens


class AddVestingStakeOutput(_TypedDict):
    pass


class DePoolAddVestingStakeFunctionCall(_FunctionCall):
    @property
    def input(self) -> AddVestingStakeInput:
        return _FunctionCall.input

    @property
    def output(self) -> AddVestingStakeOutput:
        return _FunctionCall.output


class AddLockStakeInput(_TypedDict):
    stake: int | _Tokens
    beneficiary: _Address
    withdrawalPeriod: int | _Tokens
    totalPeriod: int | _Tokens


class AddLockStakeOutput(_TypedDict):
    pass


class DePoolAddLockStakeFunctionCall(_FunctionCall):
    @property
    def input(self) -> AddLockStakeInput:
        return _FunctionCall.input

    @property
    def output(self) -> AddLockStakeOutput:
        return _FunctionCall.output


class WithdrawPartInput(_TypedDict):
    withdrawValue: int | _Tokens


class WithdrawPartOutput(_TypedDict):
    pass


class DePoolWithdrawPartFunctionCall(_FunctionCall):
    @property
    def input(self) -> WithdrawPartInput:
        return _FunctionCall.input

    @property
    def output(self) -> WithdrawPartOutput:
        return _FunctionCall.output


class WithdrawAllInput(_TypedDict):
    pass


class WithdrawAllOutput(_TypedDict):
    pass


class DePoolWithdrawAllFunctionCall(_FunctionCall):
    @property
    def input(self) -> WithdrawAllInput:
        return _FunctionCall.input

    @property
    def output(self) -> WithdrawAllOutput:
        return _FunctionCall.output


class CancelWithdrawalInput(_TypedDict):
    pass


class CancelWithdrawalOutput(_TypedDict):
    pass


class DePoolCancelWithdrawalFunctionCall(_FunctionCall):
    @property
    def input(self) -> CancelWithdrawalInput:
        return _FunctionCall.input

    @property
    def output(self) -> CancelWithdrawalOutput:
        return _FunctionCall.output


class SetVestingDonorInput(_TypedDict):
    donor: _Address


class SetVestingDonorOutput(_TypedDict):
    pass


class DePoolSetVestingDonorFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetVestingDonorInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetVestingDonorOutput:
        return _FunctionCall.output


class SetLockDonorInput(_TypedDict):
    donor: _Address


class SetLockDonorOutput(_TypedDict):
    pass


class DePoolSetLockDonorFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetLockDonorInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetLockDonorOutput:
        return _FunctionCall.output


class TransferStakeInput(_TypedDict):
    dest: _Address
    amount: int | _Tokens


class TransferStakeOutput(_TypedDict):
    pass


class DePoolTransferStakeFunctionCall(_FunctionCall):
    @property
    def input(self) -> TransferStakeInput:
        return _FunctionCall.input

    @property
    def output(self) -> TransferStakeOutput:
        return _FunctionCall.output


class ParticipateInElectionsInput(_TypedDict):
    queryId: int | _Tokens
    validatorKey: int | _Tokens
    stakeAt: int | _Tokens
    maxFactor: int | _Tokens
    adnlAddr: int | _Tokens
    signature: bytes


class ParticipateInElectionsOutput(_TypedDict):
    pass


class DePoolParticipateInElectionsFunctionCall(_FunctionCall):
    @property
    def input(self) -> ParticipateInElectionsInput:
        return _FunctionCall.input

    @property
    def output(self) -> ParticipateInElectionsOutput:
        return _FunctionCall.output


class TicktockInput(_TypedDict):
    pass


class TicktockOutput(_TypedDict):
    pass


class DePoolTicktockFunctionCall(_FunctionCall):
    @property
    def input(self) -> TicktockInput:
        return _FunctionCall.input

    @property
    def output(self) -> TicktockOutput:
        return _FunctionCall.output


class CompleteRoundWithChunkInput(_TypedDict):
    roundId: int | _Tokens
    chunkSize: int | _Tokens


class CompleteRoundWithChunkOutput(_TypedDict):
    pass


class DePoolCompleteRoundWithChunkFunctionCall(_FunctionCall):
    @property
    def input(self) -> CompleteRoundWithChunkInput:
        return _FunctionCall.input

    @property
    def output(self) -> CompleteRoundWithChunkOutput:
        return _FunctionCall.output


class CompleteRoundInput(_TypedDict):
    roundId: int | _Tokens
    participantQty: int | _Tokens


class CompleteRoundOutput(_TypedDict):
    pass


class DePoolCompleteRoundFunctionCall(_FunctionCall):
    @property
    def input(self) -> CompleteRoundInput:
        return _FunctionCall.input

    @property
    def output(self) -> CompleteRoundOutput:
        return _FunctionCall.output


class OnStakeAcceptInput(_TypedDict):
    queryId: int | _Tokens
    comment: int | _Tokens
    elector: _Address


class OnStakeAcceptOutput(_TypedDict):
    pass


class DePoolOnStakeAcceptFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnStakeAcceptInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnStakeAcceptOutput:
        return _FunctionCall.output


class OnStakeRejectInput(_TypedDict):
    queryId: int | _Tokens
    comment: int | _Tokens
    elector: _Address


class OnStakeRejectOutput(_TypedDict):
    pass


class DePoolOnStakeRejectFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnStakeRejectInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnStakeRejectOutput:
        return _FunctionCall.output


class OnSuccessToRecoverStakeInput(_TypedDict):
    queryId: int | _Tokens
    elector: _Address


class OnSuccessToRecoverStakeOutput(_TypedDict):
    pass


class DePoolOnSuccessToRecoverStakeFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnSuccessToRecoverStakeInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnSuccessToRecoverStakeOutput:
        return _FunctionCall.output


class OnFailToRecoverStakeInput(_TypedDict):
    queryId: int | _Tokens
    elector: _Address


class OnFailToRecoverStakeOutput(_TypedDict):
    pass


class DePoolOnFailToRecoverStakeFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnFailToRecoverStakeInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnFailToRecoverStakeOutput:
        return _FunctionCall.output


class TerminatorInput(_TypedDict):
    pass


class TerminatorOutput(_TypedDict):
    pass


class DePoolTerminatorFunctionCall(_FunctionCall):
    @property
    def input(self) -> TerminatorInput:
        return _FunctionCall.input

    @property
    def output(self) -> TerminatorOutput:
        return _FunctionCall.output


class SetValidatorRewardFractionInput(_TypedDict):
    fraction: int | _Tokens


class SetValidatorRewardFractionOutput(_TypedDict):
    pass


class DePoolSetValidatorRewardFractionFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetValidatorRewardFractionInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetValidatorRewardFractionOutput:
        return _FunctionCall.output


class ReceiveFundsInput(_TypedDict):
    pass


class ReceiveFundsOutput(_TypedDict):
    pass


class DePoolReceiveFundsFunctionCall(_FunctionCall):
    @property
    def input(self) -> ReceiveFundsInput:
        return _FunctionCall.input

    @property
    def output(self) -> ReceiveFundsOutput:
        return _FunctionCall.output


class GetLastRoundInfoInput(_TypedDict):
    pass


class GetLastRoundInfoOutput(_TypedDict):
    pass


class DePoolGetLastRoundInfoFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetLastRoundInfoInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetLastRoundInfoOutput:
        return _FunctionCall.output


class GetParticipantInfoInput(_TypedDict):
    addr: _Address


class InternalStruct0(_TypedDict):
    remainingAmount: int | _Tokens
    lastWithdrawalTime: int | _Tokens
    withdrawalPeriod: int | _Tokens
    withdrawalValue: int | _Tokens
    owner: _Address


class GetParticipantInfoOutput(_TypedDict):
    total: int | _Tokens
    withdrawValue: int | _Tokens
    reinvest: bool
    reward: int | _Tokens
    stakes: _Dict[int | _Tokens, int | _Tokens]
    vestings: _Dict[int | _Tokens, InternalStruct0]
    locks: _Dict[int | _Tokens, InternalStruct0]
    vestingDonor: _Address
    lockDonor: _Address


class DePoolGetParticipantInfoFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetParticipantInfoInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetParticipantInfoOutput:
        return _FunctionCall.output


class GetDePoolInfoInput(_TypedDict):
    pass


class GetDePoolInfoOutput(_TypedDict):
    poolClosed: bool
    minStake: int | _Tokens
    validatorAssurance: int | _Tokens
    participantRewardFraction: int | _Tokens
    validatorRewardFraction: int | _Tokens
    balanceThreshold: int | _Tokens
    validatorWallet: _Address
    proxies: _List[_Address]
    stakeFee: int | _Tokens
    retOrReinvFee: int | _Tokens
    proxyFee: int | _Tokens


class DePoolGetDePoolInfoFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetDePoolInfoInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetDePoolInfoOutput:
        return _FunctionCall.output


class GetParticipantsInput(_TypedDict):
    pass


class GetParticipantsOutput(_TypedDict):
    participants: _List[_Address]


class DePoolGetParticipantsFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetParticipantsInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetParticipantsOutput:
        return _FunctionCall.output


class GetDePoolBalanceInput(_TypedDict):
    pass


class GetDePoolBalanceOutput(_TypedDict):
    value0: int | _Tokens


class DePoolGetDePoolBalanceFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetDePoolBalanceInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetDePoolBalanceOutput:
        return _FunctionCall.output


class GetRoundsInput(_TypedDict):
    pass


class InternalStruct1(_TypedDict):
    id: int | _Tokens
    supposedElectedAt: int | _Tokens
    unfreeze: int | _Tokens
    stakeHeldFor: int | _Tokens
    vsetHashInElectionPhase: int | _Tokens
    step: int | _Tokens
    completionReason: int | _Tokens
    stake: int | _Tokens
    recoveredStake: int | _Tokens
    unused: int | _Tokens
    isValidatorStakeCompleted: bool
    participantReward: int | _Tokens
    participantQty: int | _Tokens
    validatorStake: int | _Tokens
    validatorRemainingStake: int | _Tokens
    handledStakesAndRewards: int | _Tokens


class GetRoundsOutput(_TypedDict):
    rounds: _Dict[int | _Tokens, InternalStruct1]


class DePoolGetRoundsFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetRoundsInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetRoundsOutput:
        return _FunctionCall.output




class DePoolConstructorFunction(_FunctionAbi):
    def with_args(self, args: ConstructorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> ConstructorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ConstructorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolConstructorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolAddOrdinaryStakeFunction(_FunctionAbi):
    def with_args(self, args: AddOrdinaryStakeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> AddOrdinaryStakeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AddOrdinaryStakeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolAddOrdinaryStakeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolWithdrawFromPoolingRoundFunction(_FunctionAbi):
    def with_args(self, args: WithdrawFromPoolingRoundInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> WithdrawFromPoolingRoundInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WithdrawFromPoolingRoundOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolWithdrawFromPoolingRoundFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolAddVestingStakeFunction(_FunctionAbi):
    def with_args(self, args: AddVestingStakeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> AddVestingStakeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AddVestingStakeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolAddVestingStakeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolAddLockStakeFunction(_FunctionAbi):
    def with_args(self, args: AddLockStakeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> AddLockStakeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AddLockStakeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolAddLockStakeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolWithdrawPartFunction(_FunctionAbi):
    def with_args(self, args: WithdrawPartInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> WithdrawPartInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WithdrawPartOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolWithdrawPartFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolWithdrawAllFunction(_FunctionAbi):
    def with_args(self, args: WithdrawAllInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> WithdrawAllInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WithdrawAllOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolWithdrawAllFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolCancelWithdrawalFunction(_FunctionAbi):
    def with_args(self, args: CancelWithdrawalInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> CancelWithdrawalInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> CancelWithdrawalOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolCancelWithdrawalFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolSetVestingDonorFunction(_FunctionAbi):
    def with_args(self, args: SetVestingDonorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> SetVestingDonorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetVestingDonorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolSetVestingDonorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolSetLockDonorFunction(_FunctionAbi):
    def with_args(self, args: SetLockDonorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> SetLockDonorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetLockDonorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolSetLockDonorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolTransferStakeFunction(_FunctionAbi):
    def with_args(self, args: TransferStakeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> TransferStakeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TransferStakeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolTransferStakeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolParticipateInElectionsFunction(_FunctionAbi):
    def with_args(self, args: ParticipateInElectionsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> ParticipateInElectionsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ParticipateInElectionsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolParticipateInElectionsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolTicktockFunction(_FunctionAbi):
    def with_args(self, args: TicktockInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> TicktockInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TicktockOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolTicktockFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolCompleteRoundWithChunkFunction(_FunctionAbi):
    def with_args(self, args: CompleteRoundWithChunkInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> CompleteRoundWithChunkInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> CompleteRoundWithChunkOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolCompleteRoundWithChunkFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolCompleteRoundFunction(_FunctionAbi):
    def with_args(self, args: CompleteRoundInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> CompleteRoundInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> CompleteRoundOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolCompleteRoundFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolOnStakeAcceptFunction(_FunctionAbi):
    def with_args(self, args: OnStakeAcceptInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> OnStakeAcceptInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnStakeAcceptOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolOnStakeAcceptFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolOnStakeRejectFunction(_FunctionAbi):
    def with_args(self, args: OnStakeRejectInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> OnStakeRejectInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnStakeRejectOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolOnStakeRejectFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolOnSuccessToRecoverStakeFunction(_FunctionAbi):
    def with_args(self, args: OnSuccessToRecoverStakeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> OnSuccessToRecoverStakeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnSuccessToRecoverStakeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolOnSuccessToRecoverStakeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolOnFailToRecoverStakeFunction(_FunctionAbi):
    def with_args(self, args: OnFailToRecoverStakeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> OnFailToRecoverStakeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnFailToRecoverStakeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolOnFailToRecoverStakeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolTerminatorFunction(_FunctionAbi):
    def with_args(self, args: TerminatorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> TerminatorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TerminatorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolTerminatorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolSetValidatorRewardFractionFunction(_FunctionAbi):
    def with_args(self, args: SetValidatorRewardFractionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> SetValidatorRewardFractionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetValidatorRewardFractionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolSetValidatorRewardFractionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolReceiveFundsFunction(_FunctionAbi):
    def with_args(self, args: ReceiveFundsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> ReceiveFundsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ReceiveFundsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolReceiveFundsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolGetLastRoundInfoFunction(_FunctionAbi):
    def with_args(self, args: GetLastRoundInfoInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetLastRoundInfoInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetLastRoundInfoOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolGetLastRoundInfoFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolGetParticipantInfoFunction(_FunctionAbi):
    def with_args(self, args: GetParticipantInfoInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetParticipantInfoInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetParticipantInfoOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolGetParticipantInfoFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolGetDePoolInfoFunction(_FunctionAbi):
    def with_args(self, args: GetDePoolInfoInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetDePoolInfoInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetDePoolInfoOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolGetDePoolInfoFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolGetParticipantsFunction(_FunctionAbi):
    def with_args(self, args: GetParticipantsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetParticipantsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetParticipantsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolGetParticipantsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolGetDePoolBalanceFunction(_FunctionAbi):
    def with_args(self, args: GetDePoolBalanceInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetDePoolBalanceInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetDePoolBalanceOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolGetDePoolBalanceFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DePoolGetRoundsFunction(_FunctionAbi):
    def with_args(self, args: GetRoundsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetRoundsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetRoundsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DePoolGetRoundsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)




class DePoolAbi():
    @staticmethod
    def constructor() -> DePoolConstructorFunction:
        return DEPOOL_ABI.get_function("constructor")

    @staticmethod
    def add_ordinary_stake() -> DePoolAddOrdinaryStakeFunction:
        return DEPOOL_ABI.get_function("addOrdinaryStake")

    @staticmethod
    def withdraw_from_pooling_round() -> DePoolWithdrawFromPoolingRoundFunction:
        return DEPOOL_ABI.get_function("withdrawFromPoolingRound")

    @staticmethod
    def add_vesting_stake() -> DePoolAddVestingStakeFunction:
        return DEPOOL_ABI.get_function("addVestingStake")

    @staticmethod
    def add_lock_stake() -> DePoolAddLockStakeFunction:
        return DEPOOL_ABI.get_function("addLockStake")

    @staticmethod
    def withdraw_part() -> DePoolWithdrawPartFunction:
        return DEPOOL_ABI.get_function("withdrawPart")

    @staticmethod
    def withdraw_all() -> DePoolWithdrawAllFunction:
        return DEPOOL_ABI.get_function("withdrawAll")

    @staticmethod
    def cancel_withdrawal() -> DePoolCancelWithdrawalFunction:
        return DEPOOL_ABI.get_function("cancelWithdrawal")

    @staticmethod
    def set_vesting_donor() -> DePoolSetVestingDonorFunction:
        return DEPOOL_ABI.get_function("setVestingDonor")

    @staticmethod
    def set_lock_donor() -> DePoolSetLockDonorFunction:
        return DEPOOL_ABI.get_function("setLockDonor")

    @staticmethod
    def transfer_stake() -> DePoolTransferStakeFunction:
        return DEPOOL_ABI.get_function("transferStake")

    @staticmethod
    def participate_in_elections() -> DePoolParticipateInElectionsFunction:
        return DEPOOL_ABI.get_function("participateInElections")

    @staticmethod
    def ticktock() -> DePoolTicktockFunction:
        return DEPOOL_ABI.get_function("ticktock")

    @staticmethod
    def complete_round_with_chunk() -> DePoolCompleteRoundWithChunkFunction:
        return DEPOOL_ABI.get_function("completeRoundWithChunk")

    @staticmethod
    def complete_round() -> DePoolCompleteRoundFunction:
        return DEPOOL_ABI.get_function("completeRound")

    @staticmethod
    def on_stake_accept() -> DePoolOnStakeAcceptFunction:
        return DEPOOL_ABI.get_function("onStakeAccept")

    @staticmethod
    def on_stake_reject() -> DePoolOnStakeRejectFunction:
        return DEPOOL_ABI.get_function("onStakeReject")

    @staticmethod
    def on_success_to_recover_stake() -> DePoolOnSuccessToRecoverStakeFunction:
        return DEPOOL_ABI.get_function("onSuccessToRecoverStake")

    @staticmethod
    def on_fail_to_recover_stake() -> DePoolOnFailToRecoverStakeFunction:
        return DEPOOL_ABI.get_function("onFailToRecoverStake")

    @staticmethod
    def terminator() -> DePoolTerminatorFunction:
        return DEPOOL_ABI.get_function("terminator")

    @staticmethod
    def set_validator_reward_fraction() -> DePoolSetValidatorRewardFractionFunction:
        return DEPOOL_ABI.get_function("setValidatorRewardFraction")

    @staticmethod
    def receive_funds() -> DePoolReceiveFundsFunction:
        return DEPOOL_ABI.get_function("receiveFunds")

    @staticmethod
    def get_last_round_info() -> DePoolGetLastRoundInfoFunction:
        return DEPOOL_ABI.get_function("getLastRoundInfo")

    @staticmethod
    def get_participant_info() -> DePoolGetParticipantInfoFunction:
        return DEPOOL_ABI.get_function("getParticipantInfo")

    @staticmethod
    def get_de_pool_info() -> DePoolGetDePoolInfoFunction:
        return DEPOOL_ABI.get_function("getDePoolInfo")

    @staticmethod
    def get_participants() -> DePoolGetParticipantsFunction:
        return DEPOOL_ABI.get_function("getParticipants")

    @staticmethod
    def get_de_pool_balance() -> DePoolGetDePoolBalanceFunction:
        return DEPOOL_ABI.get_function("getDePoolBalance")

    @staticmethod
    def get_rounds() -> DePoolGetRoundsFunction:
        return DEPOOL_ABI.get_function("getRounds")



